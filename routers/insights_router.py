import asyncio
from typing import Any, Dict, List, Literal, Optional
from datetime import datetime

from fastapi import APIRouter, Depends, HTTPException, Path, status
import os
from pydantic import BaseModel, Field
from pydantic_ai import Agent, RunContext, Tool
from pydantic_ai.providers.google_gla import GoogleGLAProvider
from pydantic_ai.models.gemini import GeminiModel

import services
import models as app_models 
from database import get_supabase_client

from core.prompts import *
from core.tools import execute_python_code

model = GeminiModel('gemini-2.0-flash', provider=GoogleGLAProvider(api_key=os.environ['GEMINI_API_KEY']))

router = APIRouter(
    prefix="/users/{user_id}/insights",
    tags=["User Insights"],
)

async def _fetch_user_financial_data(
    user_id: int, 
    supabase: Any, 
    definitions_map: Dict[str, Dict[int, str]]
) -> Dict[str, Any]:
    try:
        print(f"Fetching data for user_id: {user_id} for financial report.")
        profile = await services.fetch_user_profile(user_id=user_id, supabase=supabase)
        if not profile:
            print(f"User profile not found for user_id: {user_id}.")
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"User with ID {user_id} not found.")

        financial_knowledge_list = await services.fetch_user_financial_knowledge(
            user_id=user_id, supabase=supabase, definitions_map=definitions_map
        )
        income_details_list = await services.fetch_user_income(user_id=user_id, supabase=supabase)
        debt_details_list = await services.fetch_user_debts(user_id=user_id, supabase=supabase)
        expense_details_list = await services.fetch_user_expenses(user_id=user_id, supabase=supabase)
        print(f"Data fetched successfully for user_id: {user_id}.")

        user_profile_json = profile.model_dump_json(indent=2) if profile else 'N/A'
        financial_knowledge_data = [{'category': fk.category, 'level': fk.level, 'description': fk.description} for fk in financial_knowledge_list] if financial_knowledge_list else 'N/A'
        income_details_data = [item.model_dump() for item in income_details_list] if income_details_list else 'N/A'
        debt_details_data = [item.model_dump() for item in debt_details_list] if debt_details_list else 'N/A'
        expense_details_data = [item.model_dump() for item in expense_details_list] if expense_details_list else 'N/A'
        
        return {
            "user_profile_str": user_profile_json,
            "financial_knowledge_data": financial_knowledge_data,
            "income_details_data": income_details_data,
            "debt_details_data": debt_details_data,
            "expense_details_data": expense_details_data
        }
    except HTTPException as http_exc:
        raise http_exc
    except Exception as e:
        print(f"Error fetching data for user {user_id} for report generation: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="An unexpected error occurred while fetching user data for the report."
        )

async def _run_ai_agent(
    agent: Agent, 
    input_str: str, 
    user_id: int, 
    agent_name: str
) -> Any:
    try:
        print(f"Running {agent_name} for user_id: {user_id}...")
        loop = asyncio.get_event_loop()
        agent_response = await loop.run_in_executor(None, agent.run_sync, input_str)
        print(f"{agent_name} processing completed for user_id: {user_id}.")
        return agent_response
    except Exception as e:
        print(f"Error running {agent_name} for user {user_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An error occurred while generating the report with {agent_name}."
        )

class PriorityOutput(BaseModel):
    user_id: int
    priority: List[Literal['debt', 'savings']]
    justification: List[str]

class InsightOutput(BaseModel):
    financial_goal: str = Field(
        ...,
        description="User's financial goal based on the user's profile"
    )
    detailed_insight: str = Field(
        ...,
        description="Detailed insight generated by the agent based on the user's financial knowledge level, at max 6 sentences"
    )
    implications: str = Field(
        ...,
        description="Implications of current behavior backed with concrete figures from what was calculated, at max 5 points with 2 sentences each. Must be normalized to user's financial knowledge level. Must be in points."
    )
    recommended_actions: str = Field(
        ...,
        description="Recommended actions to take, at max 3 points with 3-4 sentences each. Must be normalized to user's financial knowledge level. Must be in points."
    )

@router.post(
    "/financial_report",
    summary="Generate a financial diagnostic report for a user",
)
async def generate_financial_report_endpoint(
    user_id: int = Path(..., title="The ID of the user for the report", ge=1),
    supabase: Any = Depends(get_supabase_client),
    definitions_map: Dict[str, Dict[int, str]] = Depends(services.get_definitions_map_with_supabase_dependency)
):
    fetched_data = await _fetch_user_financial_data(user_id, supabase, definitions_map)
    
    user_profile_str = fetched_data["user_profile_str"]
    financial_knowledge_data = fetched_data["financial_knowledge_data"]
    income_details_data = fetched_data["income_details_data"]
    debt_details_data = fetched_data["debt_details_data"]
    expense_details_data = fetched_data["expense_details_data"]

    initial_agent_input_data_str = f"""
    User Profile:
    {user_profile_str}

    Financial Knowledge:
    {financial_knowledge_data}

    Income Details:
    {income_details_data}

    Debt Details:
    {debt_details_data}

    Expense Details (Transactions):
    {expense_details_data}
    """
    print(initial_agent_input_data_str)

    financial_agent = Agent(
        model=model,
        system_prompt=financial_analysis_prompt_template,
    )
    financial_agent_response = await _run_ai_agent(
        financial_agent, initial_agent_input_data_str, user_id, "Financial Analysis Agent"
    )
    
    report_time = datetime.now().isoformat()
    financial_report_markdown = financial_agent_response.data

    financial_analysis_for_downstream = {
        "user_id": user_id,
        "report_generated_at": report_time, 
        "financial_report_markdown": financial_report_markdown
    }

    agent_input_for_downstream_agents = f"For user:\n{user_profile_str}\nDebt details:\n{debt_details_data}\nTransactions details:\n{expense_details_data}\nIncome details:\n{income_details_data}\nFinancial report:\n{financial_analysis_for_downstream['financial_report_markdown']}"

    priority_agent = Agent(
        model=model,
        system_prompt=prioritization_prompt,
        result_type=PriorityOutput
    )
    priority_agent_response = await _run_ai_agent(
        priority_agent, agent_input_for_downstream_agents, user_id, "Prioritization Agent"
    )
    
    debt_agent = Agent(
        model=model,
        system_prompt=debt_prompt,
        tools=[Tool(execute_python_code, name="execute_python_code", description="Python environment to perform complex calculations and data analysis", takes_ctx=False)],
    )
    debt_agent_response = await _run_ai_agent(
        debt_agent, agent_input_for_downstream_agents, user_id, "Debt Agent"
    )
    debt_raw_results = '\n'.join([str(r.parts[0].content) for r in debt_agent_response.all_messages()[1:]])

    debt_summarizer_prompt = """Given the context, summarize into a comprehensive insights for the user based on the user's financial knowledge on core concepts and credit.
Your insights must be backed by analysis and data, it is crucial for you to show the calculations and analysis you have done to get to the insights, eg: before and after comparison, etc.
"""
    debt_summarizer_agent = Agent(
        model=model,
        system_prompt=debt_summarizer_prompt,
        result_type=InsightOutput
    )
    debt_summarizer_input = f"Debt management plan and recommendations:\n{debt_raw_results}\n\nFinancial knowledge level:{financial_knowledge_data}"
    debt_summarizer_response = await _run_ai_agent(
        debt_summarizer_agent, debt_summarizer_input, user_id, "Debt Summarizer Agent"
    )
    debt_summarized = debt_summarizer_response.data

    savings_agent = Agent(
        model=model,
        system_prompt=savings_prompt,
        tools=[Tool(execute_python_code, name="execute_python_code", description="Python environment to perform complex calculations and data analysis", takes_ctx=False)],
    )
    savings_agent_response = await _run_ai_agent(
        savings_agent, agent_input_for_downstream_agents, user_id, "Savings Agent"
    )
    savings_raw_results = '\n'.join([str(r.parts[0].content) for r in savings_agent_response.all_messages()[1:]])

    savings_summarizer_prompt = """Given the context, summarize into a comprehensive insights for the user based on the user's financial knowledge on core concepts and budgeting.
Your insights must be backed by analysis and data, it is crucial for you to show the calculations and analysis you have done to get to the insights, eg: before and after comparison, etc.
"""
    savings_summarizer_agent = Agent(
        model=model,
        system_prompt=savings_summarizer_prompt,
        result_type=InsightOutput
    )
    savings_summarizer_input = f"Savings plan and recommendations:\n{savings_raw_results}\n\nFinancial knowledge level:{financial_knowledge_data}"
    savings_summarizer_response = await _run_ai_agent(
        savings_summarizer_agent, savings_summarizer_input, user_id, "Savings Summarizer Agent"
    )
    savings_summarized = savings_summarizer_response.data

    insights_payload_for_db = {
        "debt_insights": debt_summarized.model_dump(),
        "savings_insights": savings_summarized.model_dump(),
        "financial_report_markdown_summary": financial_report_markdown if financial_report_markdown else None,
        "priority_assessment": priority_agent_response.data.model_dump() if priority_agent_response.data else None,
        "report_generated_at": report_time
    }

    db_data_to_upsert = {
        "user_id": user_id,
        "insights": insights_payload_for_db
    }

    try:
        print(f"Upserting insights for user_id: {user_id} to Supabase.")
        response = supabase.table("users_insights").insert(
            db_data_to_upsert
        ).execute()
        print(f"Successfully upserted insights for user_id: {user_id}.")
        # if response.error:
        #     print(f"Error from Supabase during upsert for user {user_id}: {response.error.message}")
        #     raise HTTPException(
        #         status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        #         detail=f"Supabase error during upsert: {response.error.message}"
        #     )

    except HTTPException as http_exc: 
        raise http_exc
    except Exception as e:
        print(f"Error upserting insights for user {user_id} to Supabase: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An unexpected error occurred while saving insights: {str(e)}"
        )

    return {
        "user_id": user_id,
        "debt_insights": debt_summarized,
        "savings_insights": savings_summarized
    }